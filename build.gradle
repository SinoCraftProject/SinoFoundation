plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'dev.architectury.loom' version '0.12.0-SNAPSHOT' apply false
}

apply plugin: 'java'
apply plugin: 'architectury-plugin'   // Parchment mappings.
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'maven-publish'
apply plugin: 'dev.architectury.loom'

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    silentMojangMappingsLicense()

    forge {
        dataGen {
            mod 'sinofoundation'
        }
    }

    launches {
        data {
            arg "--existing", file("src/main/resources").absolutePath
        }
    }
}

version = '1.18.2-2.0.0'
if (System.getenv("JITPACK") == "true") {
    version += "-${System.getenv("VERSION")}"
}

var release = false
if (release || project.hasProperty("SINOSERIES_RELEASE")) {
    version += '-release'
} else {
    version += '-dev'
}

group = 'games.moegirl.sinocraft.sinofoundation' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'sinofoundation'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') +
        ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ')' +
        ' Arch: ' + System.getProperty('os.arch'))

println("Building SinoCore. Ver: $version.")

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }

    mavenCentral()

    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }

    maven {
        name = 'JitPack'
        url = 'https://jitpack.io'
    }
}

dependencies {
    minecraft "com.mojang:minecraft:1.18.2"
    forge "net.minecraftforge:forge:1.18.2-40.1.0"

    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.18.2:2022.08.07@zip")
    }

    modImplementation('com.github.SinoCraftProject:SinoCore:dev-SNAPSHOT') {
        changing = true
    }
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "sinofoundation",
                "Specification-Vendor"    : "SinoCraft Project Team",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "MoeGirl Games",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

import org.apache.tools.ant.filters.ReplaceTokens

task injectString(type: Copy) {
    from ('src/main/java') {
        include '**/*.java'
        filter(ReplaceTokens, tokens: [version: project.version])
    }
    into "${buildDir}/generated/java"
}

// qyl27: It only works with main.
compileJava.source = "${buildDir}/generated/java"
compileJava.dependsOn injectString
